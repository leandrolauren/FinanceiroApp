services:
  webapp:
    build: .
    image: financeiro-app:latest
    container_name: financeiro-app
    ports:
      - '8080:8080'
    env_file:
      - .env
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_keys:/app/keys
    networks:
      - app-network

  # --- 2. Banco de Dados PostgreSQL ---
  postgres:
    image: postgres:17-alpine
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # --- 3. Mensageria RabbitMQ ---
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq-server
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - '5672:5672'
      - '15672:15672'
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # --- 4. Cache com Redis ---
  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

# --- Declaração dos Volumes e Redes ---
volumes:
  postgres_data:
  redis_data:
  app_keys:

networks:
  app-network: